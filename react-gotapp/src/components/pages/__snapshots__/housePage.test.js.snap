// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Testing <HousePage/> Testing state, props and snap Header have rendered correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <housePage />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "left": <ItemList
        getData={[Function]}
        onItemSelected={[Function]}
        renderItem={[Function]}
      />,
      "right": <CharDetails
        getData={[Function]}
        itemId={4}
        title="Выберите, пожалуйста, дом из списка"
      >
        <Field
          field="region"
          label="Region"
        />
        <Field
          field="coatOfArms"
          label="coatOfArms"
        />
      </CharDetails>,
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "left": <ItemList
          getData={[Function]}
          onItemSelected={[Function]}
          renderItem={[Function]}
        />,
        "right": <CharDetails
          getData={[Function]}
          itemId={4}
          title="Выберите, пожалуйста, дом из списка"
        >
          <Field
            field="region"
            label="Region"
          />
          <Field
            field="coatOfArms"
            label="coatOfArms"
          />
        </CharDetails>,
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
